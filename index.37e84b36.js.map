{"mappings":";;AA2OA,MAAMA,EAAW,CACfC,KAAMC,SAASC,cAAc,cAC7BC,cAAeF,SAASC,cAAc,sBACtCE,SAAUH,SAASC,cAAc,WACjCG,KAAMJ,SAASC,cAAc,aAG/BH,EAASK,SAASE,iBAAiB,SAGnC,WACEP,EAASI,cAAcI,mBACrB,YACA,uC,IALJR,EAASC,KAAKM,iBAAiB,UAS/BE,eAA6BC,GAC3BA,EAAIC,iBAEJ,MACMC,EADW,IAAIC,SAASH,EAAII,eAE/BC,OAAO,WACPC,KAAIC,GAAQA,EAAKC,SACjBC,QAAOF,GAAQA,IAElB,IACA,MAAMG,QAYRX,eAAgCG,GAC9B,MAAMS,EAAW,uCACXC,QAAkBV,EAAUI,KAAIP,MAAMc,UACnBC,MAAM,GAAGH,IAAWE,MAC3BE,SAKlB,aAFmBC,QAAQC,WAAWL,IAGnCH,QAAO,EAACS,OAAEA,KAAwB,cAAXA,IACvBZ,KAAI,EAACa,MAAEA,KAAYA,EAAM,GAAGC,QAAQ,I,CAvBhBC,CAAiBnB,GAClCoB,QAyBRvB,eAA8BW,GAC5B,MAAMC,EAAW,+BACXY,EAAY,gBACZC,EAAU,kCAEVZ,QAAkBF,EAASJ,KAAIP,MAAMqB,UAClBN,MACrB,GAAGH,IAAWY,SAAiBC,OAAaJ,cAE9BL,SAGZU,QAAaT,QAAQC,WAAWL,GAEtC,OADAc,QAAQC,IAAIF,GACLA,EACJhB,QAAO,EAACS,OAAEA,KAAwB,cAAXA,IACvBZ,KACC,EACEa,OACES,SAASC,OACPA,EACAC,WAAWC,KAAEA,EAAIC,KAAEA,IAErBC,UAAUpB,QAAEA,EAAOqB,KAAEA,QAElB,C,QAAErB,E,KAASqB,E,KAAMH,E,KAAMC,E,OAAMH,K,CAlDlBM,CAAezB,GACrCgB,QAAQC,IAAIL,GAEZhC,EAASM,KAAKwC,UAAyBd,EAgE1Be,QACT,CAACC,GAAKzB,QAAEA,EAAOqB,KAAEA,EAAIL,OAAEA,EAAMG,KAAEA,EAAID,KAAEA,KACnCO,EACA,qBACMN,WAAcD,gBACpBlB,iBACAqB,gBACDH,eACAF,kBACE,G,CAxEL,MAAOU,GACPb,QAAQC,IAAIY,E,CACb,QACCvC,EAAIwC,OAAOC,O","sources":["src/index.js"],"sourcesContent":["//! CRUD\n\n//* CREATE - POST\n//* READ   - GET\n//* UPDATE - PUT & PATCH\n//* DELETE - DELETE\n\n// Приклад СТАНДАРТНОЇ СТРУКТУРИ ЗАПИТУ ВІДМІННОГО ВІД GET\n// const options = {\n//   // Вказуєм метод\n//   method: 'POST',\n//   // Описуємо тіло, що несе інформацію\n//   body: JSON.stringify({\n//     name: 'TEst user',\n//     age: 18,\n//   }),\n//   // Вказуємо контент-тайп, що є дуже важливо для POST, PUT, PATCH\n//   headers: {\n//     'Content-type': 'aplication/json',\n//   }\n// };\n// fetch('https://SomeURL', options);\n\n// fetch('https://jsonplaceholder.typicode.com/posts/1')\n//   .then((response) => response.json())\n//   .then((json) => console.log(json));\n\n// //! POST\n// const post = {\n//   title: 'group 85',\n//   body: 'group 85 first post',\n//   userId: 101,\n// };\n\n// options = {\n//   method: 'POST',\n//   body: JSON.stringify(post),\n//   headers: {\n//     'Content-type': 'application/json',\n//   },\n// };\n// fetch('https://jsonplaceholder.typicode.com/posts', options)\n//   .then(resp => {\n//     console.log(resp);\n//     if (!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n//     // Метод json() - завжди повертає проміс, тому має обовязково бути наступний then()\n//     return resp.json();\n//   })\n//   .then(data => console.log(data))\n//   .catch(err => console.log(err));\n\n// fetch('https://jsonplaceholder.typicode.com/posts/101')\n//   .then(response => response.json())\n//   .then(json => console.log(json));\n\n// //! PATCH - UPDATE\n// //* Можна оновлувати тільки те, що нам потрібно, скажімо, title\n// const DB = {\n//   id: 1,\n//   title: 'Some title',\n//   body: 'Some body',\n//   userID: 101,\n// };\n\n// const req = {\n//   title: 'New value',\n// };\n\n// const resalt = {\n//   id: 1,\n//   title: 'New value',\n//   body: 'Some body',\n//   userID: 101,\n// };\n\n// //************************************************************ */\n// fetch('https://jsonplaceholder.typicode.com/posts/1')\n//   .then(response => response.json())\n//   .then(json => console.log('json-resp from GET: ', json));\n\n// const options = {\n//   method: 'PATCH',\n//   body: JSON.stringify({\n//     title: 'New title from PATCH method!',\n//   }),\n//   headers: {\n//     'Content-type': 'application/json',\n//   },\n// };\n\n// fetch('https://jsonplaceholder.typicode.com/posts/1', options)\n//   .then(resp => {\n//     console.log('resp: ', resp);\n//     if(!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n\n//     return resp.json();\n//   })\n//   .then(data => console.log('data: ', data))\n//   .catch(err => console.log('err', err));\n// //************************************************************ */\n\n// //! PUT - UPDATE\n// //* Метод PUT - перезатре весь обєкт тією інформацією, що ми надаємо, окрім ID, бо то база даних сама встановлює.\n\n// //* У Базы даних вже э така ынформація\n// const DB = {\n//   id: 1,\n//   title: 'Some title',\n//   body: 'Some body',\n//   userID: 101,\n// };\n\n// //* Дані для PUT запиту\n// const req = {\n//   title: 'New value',\n// };\n\n// //* Маємо результат\n// const resalt = {\n//   id: 1,\n//   title: 'New value',\n// };\n\n// //! DELETE - DELETE\n// fetch('https://jsonplaceholder.typicode.com/posts/1')\n//   .then(response => response.json())\n//   .then(json => console.log('json-resp from GET: ', json));\n\n// const options = {\n//   method: 'PATCH',\n//   body: JSON.stringify({\n//     title: 'New title from PATCH method!',\n//   }),\n//   headers: {\n//     'Content-type': 'application/json',\n//   },\n// };\n\n// fetch('https://jsonplaceholder.typicode.com/posts/1', options)\n//   .then(resp => {\n//     console.log('resp: ', resp);\n//     if(!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n\n//     return resp.json();\n//   })\n//   .then(data => console.log('data: ', data))\n//   .catch(err => console.log('err', err));\n// //************************************************************ */\n// fetch('https://jsonplaceholder.typicode.com/posts/1', {method: 'DELETE'})\n// .then(resp => {\n//   console.log('resp delete: ', resp);\n//   if(!resp.ok) {\n//     throw new Error(resp.statusText);\n//   }\n//   return resp.json();\n// })\n// .then(data => console.log('data delete resp.json(): ', data))\n// .catch(err => console.log('err delete: ', err));\n\n// //! Робота з формою\n// const form = document.querySelector('.js-question');\n\n// form.addEventListener('submit', handlerQuestion);\n\n// function handlerQuestion(evt) {\n//   evt.preventDefault();\n//   // деструктуризацією знімаємо значення елементів форми\n//   const { usrName, phone, email, question } = evt.currentTarget.elements;\n\n//   const request = {\n//     // Присвоюємо значення відповідного поля\n//     name: usrName.value,\n//     phone: phone.value,\n//     email: email.value,\n//     comment: question.value,\n//   };\n\n//   serviceQuestion(request)\n//     .then(data => console.log(data))\n//     .catch(err => console.log(err))\n//     .finally(() => evt.target.reset());\n// }\n\n// // Функція для запиту на бекентд\n// function serviceQuestion(data) {\n//   // Описуємо опції запиту\n//   const options = {\n//     method: 'POST',\n//     body: JSON.stringify(data),\n//     headers: {\n//       'Content-type': 'application/json',\n//     },\n//   };\n\n//   // Сам запит\n//   // return fetch('http://127.0.0.1:3000/api/question', options)\n//   return fetch('http://127.0.0.1:3000/api/question', options).then(resp => {\n//     console.log('bek-end resp: ', resp);\n//     if (!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n\n//     return resp.json();\n//   });\n// }\n\n// //! JS-11.2 *************************************************************\n\n// async function serviceCountries() {\n//   // //! Послідовний запит\n//   // const reps1 = await fetch('https://restcountries.com/v3.1/name/Ukraine');\n//   // const reps2 = await fetch('https://restcountries.com/v3.1/name/France');\n//   // const reps3 = await fetch('https://restcountries.com/v3.1/name/Poland');\n\n//   //! Паралельний запит\n//   const countries = ['Ukraine', 'France', 'Poland'];\n//   // Через map робимо fetch на кожну країну масиву\n//   const responses = countries.map(async country => {\n//      const resp = await fetch(`C/${country}`);\n//     //  console.log(resp);\n//      return resp.json();\n//   });\n//   console.log(responses);\n// }\n\n// serviceCountries();\n\n//! Практика форми  з полями на країни + погода\n\nconst elements = {\n  form: document.querySelector('.js-search'),\n  formContainer: document.querySelector('.js-form-container'),\n  addField: document.querySelector('.js-add'),\n  list: document.querySelector('.js-list'),\n};\n\nelements.addField.addEventListener('click', handlerAdd);\nelements.form.addEventListener('submit', handlerSearch);\n\nfunction handlerAdd() {\n  elements.formContainer.insertAdjacentHTML(\n    'beforeend',\n    '<input type=\"text\" name=\"country\" />'\n  );\n}\n\nasync function handlerSearch(evt) {\n  evt.preventDefault();\n\n  const formData = new FormData(evt.currentTarget);\n  const countries = formData\n    .getAll('country')\n    .map(item => item.trim())\n    .filter(item => item);\n\n  try {\n  const capitals = await serviceCountries(countries);\n  const weather = await serviceWeather(capitals);\n  console.log(weather);\n\n  elements.list.innerHTML = createMarkup(weather);\n  } catch (err) {\n    console.log(err);\n  } finally {\n    evt.target.reset();\n  }\n}\n\nasync function serviceCountries(countries) {\n  const BASE_URL = 'https://restcountries.com/v3.1/name/';\n  const responses = await countries.map(async country => {\n    const response = await fetch(`${BASE_URL}${country}`);\n    return response.json();\n  });\n\n  const data = await Promise.allSettled(responses);\n\n  return data\n    .filter(({ status }) => status === 'fulfilled')\n    .map(({ value }) => value[0].capital[0]);\n}\n\nasync function serviceWeather(capitals) {\n  const BASE_URL = 'http://api.weatherapi.com/v1';\n  const END_POINT = '/current.json';\n  const API_KEY = '14c56bddeab14583a6e164909231107';\n\n  const responses = await capitals.map(async capital => {\n    const response = await fetch(\n      `${BASE_URL}${END_POINT}?key=${API_KEY}&q=${capital}&lang=uk`\n    );\n    return response.json();\n  });\n\n  const data = await Promise.allSettled(responses);\n  console.log(data);\n  return data\n    .filter(({ status }) => status === 'fulfilled')\n    .map(\n      ({\n        value: {\n          current: {\n            temp_c,\n            condition: { text, icon },\n          },\n          location: { country, name },\n        },\n      }) => ({ country, name, text, icon, temp_c })\n    );\n}\n\nfunction createMarkup(arr) {\n  // return arr\n  //   .map(\n  //     ({ country, name, temp_c, icon, text }) => `<li>\n  //     <img src=\"${icon}\" alt=\"${text}\" />\n  //     <h2>${country}</h2>\n  //     <h2>${name}</h2>\n  //     <p>${text}</p>\n  //     <p>${temp_c}</p>\n  //   </li>`\n  //   )\n  //   .join('');\n\n    return arr.reduce(\n      (acc, { country, name, temp_c, icon, text }) =>\n        acc +\n        `<li>\n  <img src=\"${icon}\" alt=\"${text}\" />\n  <h2>${country}</h2>\n  <h2>${name}</h2>\n  <p>${text}</p>\n  <p>${temp_c}</p>\n  </li>`,'');\n}\n"],"names":["$1f0dc3b9307be026$var$elements","form","document","querySelector","formContainer","addField","list","addEventListener","insertAdjacentHTML","async","evt","preventDefault","countries","FormData","currentTarget","getAll","map","item","trim","filter","capitals","BASE_URL","responses","country","fetch","json","Promise","allSettled","status","value","capital","$1f0dc3b9307be026$var$serviceCountries","weather","END_POINT","API_KEY","data","console","log","current","temp_c","condition","text","icon","location","name","$1f0dc3b9307be026$var$serviceWeather","innerHTML","reduce","acc","err","target","reset"],"version":3,"file":"index.37e84b36.js.map"}